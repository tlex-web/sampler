class PRNG {
    private _length: number;
    private mt: number[];
    private index: number;

    /**
     * Pseudo random number generator
     * @param {number} seed
     * @return Instance of PRNG
     * @see https://en.wikipedia.org/wiki/Pseudorandom_number_generator
     * @see https://en.wikipedia.org/wiki/Mersenne_Twister
     */
    constructor(seed: number) {
        this._length = 624;
        // The array holds the state of the generator
        this.mt = new Array(this._length);
        this.index = 0;

        // Initialize the generator and set the first value as seed
        this.mt[0] = seed;
        for (let i = 1; i < this._length; ++i) {
            // The & 0xffffffff is necessary to get the same results as in the original code
            const prev = this.mt[i - 1];
            // Ensure that the value is different than the previous one
            this.mt[i] = (1812433253 * (prev ^ (prev >> 30)) + i) >>> 0;
        }
    }

    /**
     * Generate a random number between two numbers, including min and max
     * @param {Number} min
     * @param {Number} max
     * @return Number
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
     */
    next(min: number, max: number) {
        // Normalize to [0, 1]
        const randomNumber: number = this.generateRandomNumber() / 0xffffffff; // Max 32-bit unsigned integer
        const range: number = max - min + 1;
        // Round down to the nearest integer
        return Math.floor(randomNumber * range) + min;
    }

    generateRandomNumber() {
        if (this.index === 0) {
            this.generateNumbers();
        }

        // Various bit manipulation operations are applied to y to ensure randomness.
        // These operations include bitwise shifting, XOR operations, and logical AND operations.
        // The specific bitwise manipulation is based on the Mersenne Twister algorithm.
        let y = this.mt[this.index];
        y ^= y >> 11;
        y ^= (y << 7) & 0x9d2c5680; // 0x9d2c5680 = 2636928640
        y ^= (y << 15) & 0xefc60000; // 0xefc60000 = 4022730752
        y ^= y >> 18;

        // If the index reaches the length of the array a new batch of untempered numbers is generated by calling generateNumbers()
        this.index = (this.index + 1) % this._length;
        return y;
    }

    generateNumbers() {
        // Generate an array of 624 untempered numbers
        // Each iteration mixes bits from the current number with bits from the next number
        for (let i = 0; i < this._length; i++) {
            const y = (this.mt[i] & 0x80000000) + (this.mt[(i + 1) % this._length] & 0x7fffffff); // 0x80000000 = 2147483648, 0x7fffffff = 2147483647
            this.mt[i] = this.mt[(i + 397) % 624] ^ (y >> 1);

            if (y % 2 !== 0) {
                this.mt[i] ^= 0x9908b0df; // 0x9908b0df = 2567483615
            }
        }
    }
}

module.exports = PRNG;
